f = '../spectrum analyzer/spec.txt'
test_spectum = pd.read_csv(f,names=['counts'])
f_0 = 7#7 # channels
f_x = 13#0
x_ch = 2800

def gaussian(x, amplitude, mean, fwhm):
    """
    Gaussian function.

    Parameters:
    - x: array-like
        Input values.
    - amplitude: float
        Amplitude of the Gaussian.
    - mean: float
        Mean (center) of the Gaussian.
    - fwhm: float
        Standard deviation/2.35482 (width) of the Gaussian
        this is half of the distance for which the Gaussian gives half of the maximum value.

    Returns:
    - y: array-like
        Gaussian values.
    """
    return amplitude * np.exp(-(1/2)*((x-mean) / (fwhm/2.35482))**2)

def gaussian_1_dev(x, amplitude, mean, fwhm):
    """
    First derivative of a Gaussian.

    Parameters:
    - x: array-like
        Input values.
    - amplitude: float
        Amplitude of the Gaussian.
    - mean: float
        Mean (center) of the Gaussian.
    - fwhm: float
        Standard deviation/2.35482 (width) of the Gaussian
        this is half of the distance for which the Gaussian gives half of the maximum value.
    Returns:
    numpy array
        first derivaive of a Gaussian.

    """
    return amplitude * (-(x-mean) / (fwhm/2.35482)) * gaussian(x, amplitude, mean, fwhm)

def kernel(x, y):
    """Generate the kernel for the given x value.
    the kernel i"""
    fwhm = (f_0**2 + ((f_x**2 - f_0**2))* (y / (x_ch+1)))**(0.5)
    amplitude = 1
    return gaussian_1_dev(x, amplitude, y, fwhm)

def kernel_matrix(channels):
    """Build a matrix of the kernel evaluated at each x value."""
    n_channels = len(channels) - 1
    kernel_mat = np.zeros((n_channels, n_channels))
    for i, x in enumerate(channels[:-1]):
        print(i)
        kernel_mat[:, i] = kernel(channels, x)
    kern_pos = +1 * kernel_mat.clip(0, np.inf)
    kern_neg = -1 * kernel_mat.clip(-np.inf, 0)
    # normalize negative part to be equal to the positive part
    kern_neg *= kern_pos.sum(axis=0) / (kern_neg.sum(axis=0)+1e-20)
    #return kern_pos - kern_neg
    return kernel_mat



def convolve(channels,spectrum):
    """Convolve this kernel with the data."""

#    kern_mat_pos = +1 * kern_mat.clip(0, np.inf)
#    kern_mat_neg = -1 * kern_mat.clip(-np.inf, 0)
    convolution = []
    peak_plus_bkg = []
    bkg = []
    for i, x in enumerate(channels):
        kern_vector = kernel(channels, x)
#        kern_vector_pos = +1 * kern_vector.clip(0, np.inf)
#        kern_vector_neg = -1 * kern_vector.clip(-np.inf, 0)
        convolution.append(np.dot(kern_vector, spectrum))
#        peak_plus_bkg.append(np.dot(kern_vector_pos, spectrum))
#        bkg.append(np.dot(kern_vector_neg, spectrum))
    return np.array(convolution)#, peak_plus_bkg, bkg

channels = np.array(range(16384))
I =  convolve(channels,test_spectum['counts'].values)


plt.plot(channels,I)
plt.plot(channels, test_spectum['counts'].values)
plt.xlim([14200,14400])
#plt.ylim([-1000,1000])
